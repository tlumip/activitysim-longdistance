Description,Target,Expression
home_zone_id,home_zone_id,"reindex(households.home_zone_id, persons.household_id)"
# fix the government split category - before, it combined government and unemployed people
,SW_SPLIT_IND,"np.where(persons['SW_UNSPLIT_IND'] == 0, 0, persons['SW_SPLIT_IND'])"
,univ_student_status,"(persons.age >= 18) & (persons.SCH >= 2)"
# ptype == 1 are full-time workers
#   Employment status recode (ESR)
#   0 .N/A (less than 16 years old)
#   1 .Civilian employed, at work
#   2 .Civilian employed, with a job but not at work (e.g., teachers during summer, maternity leave)
#   3 .Unemployed
#   4 .Armed forces, at work
#   5 .Armed forces, with a job but not at work (see 2)
#   6 .Not in labor force
,_PTYPE,"np.where(persons['ESR'].isin([1, 2, 4, 5]), 1, 0)"
# ptype == 4, non-working adult
# include non-working 16-65 year olds only (seems to be what mtc has except with 16 instead of 17 as the lower bound)
,_PTYPE,"np.where(((df['age'] >= 16) & (df['age'] <= 65) & (df['ESR'].isin([3, 6]))), 4, _PTYPE)"
# ptype == 5, retirees
# above 65 and not in labor force/unemployed, follows mtc
,_PTYPE,"np.where((df['age'] >= 65) & (df['ESR'].isin([3, 6])), 5, _PTYPE)"
# ptype == 3, univeristy students
# assume all people above 19 and in school are in university; mtc seems ot be more detailed
,_PTYPE,"np.where((df['SCH'].isin([2, 3])) & (df['age'] >= 18), 3, _PTYPE)"
# ptype == 6, driving-age child who is in school
# 16-18 year olds in school (not mtc, which seems to be more detailed)
,_PTYPE,"np.where((df['age'] >= 16) & (df['age'] <= 17) & (df['SCH'].isin([2, 3])), 6, _PTYPE)"
# ptype == 7, pre-driving school-age child
,_PTYPE,"np.where((df['age'] <= 15) & (df['age'] >= 6), 7, _PTYPE)"
# ptype == 8, pre-school age child
,ptype,"np.where(df['age'] <= 5, 8, _PTYPE)"
age_16_to_19,age_16_to_19,"persons.age.between(16, 19)"
age_16_p,age_16_p,persons.age >= 16
adult,adult,persons.age >= 18
presence of non_worker other than self in household,has_non_worker,"other_than(persons.household_id, ptype == PTYPE_NONWORK)"
presence of retiree other than self in household,has_retiree,"other_than(persons.household_id, ptype == PTYPE_RETIRED)"
presence of preschooler other than self in household,has_preschool_kid,"other_than(persons.household_id, ptype == PTYPE_PRESCHOOL)"
presence of driving_kid other than self in household,has_driving_kid,"other_than(persons.household_id, ptype == PTYPE_DRIVING)"
presence of school_kid other than self in household,has_school_kid,"other_than(persons.household_id, ptype == PTYPE_SCHOOL)"
presence of university student other than self in household,has_university,"other_than(persons.household_id, ptype == PTYPE_UNIVERSITY)"
#,presence of full_time worker other than self in household (independent of person type),has_full_time,"other_than(persons.household_id, persons.pemploy==PEMPLOY_FULL)"
#,presence of part_time worker other than self in household (independent of person type),has_part_time,"other_than(persons.household_id, persons.pemploy==PEMPLOY_PART)"
#,student_is_employed,student_is_employed,"(ptype.isin([PTYPE_UNIVERSITY, PTYPE_DRIVING]) & persons.pemploy.isin([PEMPLOY_FULL, PEMPLOY_PART]))"
#,nonstudent_to_school,nonstudent_to_school,"(ptype.isin([PTYPE_FULL, PTYPE_PART, PTYPE_NONWORK, PTYPE_RETIRED]) & persons.pstudent.isin([PSTUDENT_GRADE_OR_HIGH, PSTUDENT_UNIVERSITY]))"
#,,
#,, FIXME - if person is a university student but has school age student category value then reset student category value
#,pstudent,"persons.pstudent.where(ptype!=PTYPE_UNIVERSITY, PSTUDENT_UNIVERSITY)"
#,, FIXME if person is a student of any kind but has full-time employment status then reset student category value to non-student
#,pstudent,"pstudent.where(ptype!=PTYPE_FULL, PSTUDENT_NOT)"
#,, FIXME if student category is non-student and employment is student then reset student category value to student
#,pstudent,"pstudent.where((ptype!=PTYPE_DRIVING) & (ptype!=PTYPE_SCHOOL), PSTUDENT_GRADE_OR_HIGH)"
#,,
#,is_student,is_student,"pstudent.isin([PSTUDENT_GRADE_OR_HIGH, PSTUDENT_UNIVERSITY])"
#,preschool age can go to preschool,is_student,"is_student.where(persons.age > GRADE_SCHOOL_MIN_AGE, True)"
#,preschool age can go to preschool,pstudent,"pstudent.where(persons.age > GRADE_SCHOOL_MIN_AGE, PSTUDENT_GRADE_OR_HIGH)"
#,is_gradeschool,is_gradeschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (persons.age <= GRADE_SCHOOL_MAX_AGE)
#,is_highschool,is_highschool,(pstudent == PSTUDENT_GRADE_OR_HIGH) & (persons.age > GRADE_SCHOOL_MAX_AGE)
#,is_university,is_university,pstudent == PSTUDENT_UNIVERSITY
#,school_segment gradeschool,school_segment,"np.where(is_gradeschool, SCHOOL_SEGMENT_GRADE, SCHOOL_SEGMENT_NONE)"
#,school_segment highschool,school_segment,"np.where(is_highschool, SCHOOL_SEGMENT_HIGH, school_segment)"
#,school_segment university,school_segment,"np.where(is_university, SCHOOL_SEGMENT_UNIV, school_segment).astype(np.int8)"
#,#,,
#,is_worker,is_worker,"persons.pemploy.isin([PEMPLOY_FULL, PEMPLOY_PART])"
